plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.multiplatform'
}
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${versions.kotlin}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
}

android {
    configurations {
        create("androidTestApi")
        create("androidTestDebugApi")
        create("androidTestReleaseApi")
        create("testApi")
        create("testDebugApi")
        create("testReleaseApi")
    }
}


kotlin {
    targets {
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'js')

        fromPreset(determineIosPreset(), 'ios') {
            binaries {
                framework("libsudoku") {
                    export project(":libcanvas")
                    export project(":libsudokusolver")
                    export project(":libstorage")
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api project(':libcanvas')
                api project(':libsudokusolver')
                api project(':libstorage')

                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}"
            }
        }
    }
}

// If custom preset specified in 'sudoku.preset.name' property, then use it for building.
// Otherwise build for iPhone simulator (by default).
def determineIosPreset() {
    String presetName = project.hasProperty('sudoku.preset.name') ? project.properties['sudoku.preset.name'] : 'iosX64'
    def preset = project.kotlin.presets[presetName]
    println("$project has been configured for $presetName platform.")
    preset
}
task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("libsudoku", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode