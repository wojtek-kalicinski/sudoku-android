plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.plugin.serialization'
}


kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')

        fromPreset(determineIosPreset(), 'ios')
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0-RC'
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}"
            }
        }

        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:${versions.kotlin}"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
            }
        }
    }
}


configurations {
    compileClasspath
}

// If custom preset specified in 'sudoku.preset.name' property, then use it for building.
// Otherwise build for iPhone simulator (by default).
def determineIosPreset() {
    String presetName = project.hasProperty('sudoku.preset.name') ? project.properties['sudoku.preset.name'] : 'iosX64'
    def preset = project.kotlin.presets[presetName]
    println("$project has been configured for $presetName platform.")
    preset
}